/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;
import com.corundumstudio.socketio.Configuration;
import java.util.Base64;
import java.net.InetAddress;
import java.net.UnknownHostException;
import com.corundumstudio.socketio.SocketIOClient;
import data.DataFileSending;
import data.DataFileServer;
import data.DataReader;
import io.socket.client.Ack;
import io.socket.client.Socket;
import io.socket.client.IO;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import io.socket.emitter.Emitter;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;
/**
 *
 * @author zekican
 */
public class Main_Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Main_Client() {
        initComponents();
        model = (DefaultTableModel) table.getModel();
        modelFile = (DefaultTableModel) tableFile.getModel();
        table.getColumnModel().getColumn(4).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1){
                Object data = jtable.getValueAt(i, 0);
                if(data instanceof DataReader){
                    DataReader reader = (DataReader) data;
                    return reader.getStatus();
                }else{
                    return super.getTableCellRendererComponent(jtable, o, bln1, bln1, i, i1);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cmdConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableFile = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        jButton1.setText("File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cmdConnect.setText("Connect");
        cmdConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "No", "File Name", "Size", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(0);
            table.getColumnModel().getColumn(0).setPreferredWidth(0);
            table.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdConnect)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );

        jTabbedPane1.addTab("Client", jPanel1);

        tableFile.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "No", "File Name", "Size", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableFile);
        if (tableFile.getColumnModel().getColumnCount() > 0) {
            tableFile.getColumnModel().getColumn(0).setMinWidth(0);
            tableFile.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableFile.getColumnModel().getColumn(0).setMaxWidth(0);
            tableFile.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("File on Server", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed
    private final int DEFAULT_PORT = 9999;
    private final DefaultTableModel model;
    private final DefaultTableModel modelFile;
    private Socket client;
    private SocketIOClient cli;
    private String fileName;
    private String executeFile="",paramFile="",inputFile="",exeFile="";
    private int TaskNumber;
    private int totalTaskNumber = 0;
    private long processTime = 0;
    private long executeFileSize, inputFileSize, paramFileSize;
    private String IP = "10.1.91.160";
    private void cmdConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectActionPerformed
        try {
            InetAddress ip = InetAddress.getLocalHost();
            System.out.println("Bilgisayarın IP Adresi: " + ip.getHostAddress());
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        try{
            client = IO.socket("http://" + IP + ":" + DEFAULT_PORT);
            
            client.on("exit_app", new Emitter.Listener(){
               @Override
               public void call(Object... os){
                   System.exit(0);
               }
            });
            client.on("new_file", new Emitter.Listener(){
               @Override
               public void call(Object... os){
                   try{
                       addFile(new DataFileServer((JSONObject)os[0]));
                   }catch(JSONException e){
                   e.printStackTrace();
               }
               }
            });
            client.on("server_file", new Emitter.Listener() {
                
                @Override
                public void call(Object... os) {
                   JSONObject data = (JSONObject) os[0];
                   try{
                    
                    fileName = data.getString("fileName");
                    if(data.getInt("code") == 1){
                        executeFile = fileName;
                        executeFileSize = (long)data.getLong("fileSize");
                    }else if(data.getInt("code") == 3){
                        inputFile = fileName;
                        inputFileSize = (long)data.getLong("fileSize");
                    }else if(data.getInt("code") == 2){
                        exeFile = fileName;
                        
                    }
                    TaskNumber = data.getInt("taskNumber");
                    
                    initFileTransfer(fileName);
                    System.out.println("task number: " + TaskNumber);
                    System.out.println(data.get("fileName"));
                    System.out.println(data.get("fileSize"));
                    System.out.println(data.getString("param"));
                    paramFile = data.getString("param");
                   }catch(Exception e){
                       e.printStackTrace();
                   }
                    System.out.println("server_file içine girdi");
                    //client.emit("start_send", "1");
                    
                }
            });
            
            client.on("sending", new Emitter.Listener() {
                @Override
                public void call(Object... os) {
                    JSONObject data = (JSONObject) os[0];
                    try {
                        //System.out.println("geldi");
                        //System.out.println(data.getString("fileName"));
                        writeFile(data.getString("fileName"), data.getString("line"));
                                      //satır satır gelicek  
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
            });
            client.on("send_finish_execute", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("execute");
//                    try{
//                        Thread.sleep(1000);
//                    }catch(Exception e){
//                        e.printStackTrace();
//                    }                  
                    executeFile();
                }  
            });
            
            client.on("stop", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("tasks finished");  
                    System.out.println(executeFile + " " + inputFile + " " + paramFile);
                    client.emit("processTime", processTime + "_" + totalTaskNumber);
                    System.out.println(processTime);
                    
                }  
            });
            String os = System.getProperty("os.name").toLowerCase();
            client.on("send_finish", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                  JSONObject data = (JSONObject) os[0];
                   try{
                        System.out.println(data.getString("fileName") + " " + data.getInt("code"));
//                        File file,file2,file3;
//                        if(os.equals("linux")){
//                            String userName = System.getProperty("user.home");
//                            file = new File(userName + "/Desktop/dist/" + executeFile);
//                            file2 = new File(userName + "/Desktop/dist/" + paramFile);
//                            file3 = new File(userName + "/Desktop/dist/" + inputFile);
//                        }else{
//                            //System.out.println("windows" + fileName);
//                            file = new File("E:/server_data/" + executeFile);
//                            file2 = new File("E:/server_data/" + paramFile);  
//                            file3 = new File("E:/server_data/" + inputFile);  
//                        }
//                        System.out.println(executeFile + " " + inputFile + " " + paramFile);
//                        System.out.println(file.length() + " " + file2.length() + " " + file3.length());
//                        System.out.println(executeFileSize + " " + inputFileSize + " " + paramFileSize);
//                        if(file.length() == executeFileSize){
//                            if(paramFileSize > 0 && inputFileSize > 0){
//                                if(paramFileSize == file2.length() && inputFileSize == file3.length()){
//                                    client.emit("can_execute","");
//                                }
//                            }else if(paramFileSize > 0 && inputFileSize == 0){
//                                if(paramFileSize == file2.length()){
//                                    client.emit("can_execute","");
//                                }
//                            }else if(paramFileSize == 0 && inputFileSize > 0){
//                                if(inputFileSize == file3.length()){
//                                    client.emit("can_execute","");
//                                }
//                            }else{
//                                client.emit("can_execute","");
//                            }
//                        }                   
                   }catch(Exception e){
                       e.printStackTrace();
                   }  
            }});
             
            
            client.on("deneme_send_file", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println(os[0].getClass());
                    JSONObject data = (JSONObject)os[0];
                    try{
                        
                        File file = new File("C:/client/new.txt");
                        file.createNewFile();
                        
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    
                                       
                }  
            });
            client.on("deneme_sending", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    JSONObject data = (JSONObject) os[0];
                    try{
                        
                       System.out.println("data türü: " + data.getClass().getName());
                       System.out.println("data içeriği: " + data.toString()); 
                       System.out.println(data.get("data").getClass());
                       File file = new File("C:/client/new.txt");
                       RandomAccessFile acces = new RandomAccessFile(file,"r");
                       byte[] fileBytes = Base64.getDecoder().decode(data.getString("fileName"));
                       FileOutputStream fos = new FileOutputStream("C:/client/new.txt");
                       fos.write(fileBytes);
                       
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    
                                       
                }  
            });
            client.on("keep_going", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("keep going geldi");
                    }  
            });
            client.open();
            String userName = txtName.getText().trim();
            client.emit("set_user",userName);
//            client.emit("request", "list_file",new Ack() {
//                @Override
//                public void call(Object... os) {
//                    try{
//                        for(Object o:os){
//                            addFile(new DataFileServer((JSONObject) o));
//                        }
//                    }catch(Exception e){
//                        e.printStackTrace();
//                    }
//                }
//            });
        }catch(URISyntaxException e){
            System.err.println(e);
        }
    }//GEN-LAST:event_cmdConnectActionPerformed
    private void writeFile(String fileNameString, String line) throws IOException{
        String os = System.getProperty("os.name").toLowerCase();
        File file;
        FileOutputStream fos;
        if(os.equals("linux")){
            String userName = System.getProperty("user.home");
            file = new File(userName + "/Desktop/dist/" + fileNameString);
            fos = new FileOutputStream(userName + "/Desktop/dist/" + fileNameString,true);
        }else{
            //System.out.println("windows" + fileName);
            file = new File("C:/client/" + fileNameString);    
            fos = new FileOutputStream("C:/client/" + fileNameString,true);
        }
         
       
        byte[] fileBytes = Base64.getDecoder().decode(line);
        
        fos.write(fileBytes);
        fos.close();
//        RandomAccessFile accFile = new RandomAccessFile(file, "rw");
//        accFile.seek(accFile.length());
//
//            // Satırı dosyaya yazın
//        accFile.writeBytes(line + System.lineSeparator());    
//        if(executeFile.equals(fileNameString)){
//            System.out.println("satır:" + line);
//        }
//        accFile.close();
    }
    private static volatile boolean isStuck = true;
    private static volatile boolean wait = true;
    private static volatile int isInfinite = 0;
    private void executeFile(){
        long startTime = System.currentTimeMillis();
        
        
        String os = System.getProperty("os.name").toLowerCase();
        if(os.equals("linux")){
            
            String command = "";
            command = "python3 " + executeFile;
            System.out.println("inputFile:" + inputFile + " param:" + paramFile + " exeFile:" + exeFile);
            System.out.println(exeFile != "");
            System.out.println(inputFile != "");
            System.out.println(paramFile != ""); 
            if(inputFile != "" && paramFile != "" && exeFile == ""){
                command = "python3 " + executeFile + " " + inputFile + " " + paramFile;
            }
            else if(paramFile != "" && inputFile == "" && exeFile != ""){
                command = "python3 " + executeFile + " ./" + exeFile + " " + paramFile;
            }else if(inputFile != "" && paramFile == "" && exeFile == ""){
                command = "python3 " + executeFile + " " + inputFile;
            }else if(exeFile != "" && inputFile != ""){
                command = "python3 " + executeFile + " ./" + exeFile + " " + inputFile;
            }else if(exeFile == "" && inputFile == "" && paramFile != ""){
                command = "python3 " + executeFile + " " + paramFile;
            }
            System.out.println("command: " + command + " exe:" + exeFile);
            
                
                try{
                    //Process process = Runtime.getRuntime().exec(command);
                    
                    
                    Process process = Runtime.getRuntime().exec(command);
                    System.out.println("process başladı");
                    
                    InputStream inputStream = process.getInputStream();
                    InputStream errorStream = process.getErrorStream();
                    
                Thread outputThread = new Thread(() ->  {
              
                    try{
                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    File outputFile = new File(TaskNumber + "_output.txt");
                    outputFile.createNewFile();
                    System.out.println("output kısmı");
//                    ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
//                        executorService.scheduleAtFixedRate(() -> {
//                            // Burada her 5 saniyede bir sockete mesaj gönderme işlemini gerçekleştirebilirsiniz
//                            System.out.println("Socket'e mesaj gönderme işlemi");
//                            client.emit("working", "");
//                        }, 0, 5, TimeUnit.SECONDS);
                    BufferedWriter writeOutput = new BufferedWriter(new FileWriter(TaskNumber + "_output.txt"));
                    String txtWrite = "";
                    if(inputFile != "" && paramFile != "" && exeFile == ""){
                        txtWrite = "Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText();
                    }
                    else if(paramFile != "" && inputFile == "" && exeFile != ""){
                        txtWrite = "Task is executed as: " + executeFile + " ./" + exeFile + " " + paramFile + " by Client -> " + txtName.getText();
                    }else if(inputFile != "" && paramFile == "" && exeFile == ""){
                        txtWrite = "Task is executed as: " + executeFile + " " + inputFile + " by Client -> " + txtName.getText();
                    }else if(exeFile != "" && inputFile != ""){
                        txtWrite = "Task is executed as: " + executeFile + " ./" + exeFile + " " + inputFile + " by Client -> " + txtName.getText();
                    }else if(exeFile == "" && inputFile == "" && paramFile != ""){
                        txtWrite = "Task is executed as: " + executeFile + " " + paramFile + " by Client -> " + txtName.getText();
                    }
                    writeOutput.write(txtWrite);
                    writeOutput.newLine();
                    writeOutput.newLine();
                    while((line = reader.readLine()) != null){
                        System.out.println(line);
                        writeOutput.write(line);
                        writeOutput.newLine();
                        
                    }
                    writeOutput.close();
                    File errorFile = new File(TaskNumber + "_ErrorOutput.txt");
                    errorFile.createNewFile();
                    BufferedWriter errorOutput = new BufferedWriter(new FileWriter(TaskNumber + "_ErrorOutput.txt"));
                    BufferedReader errorReader = new BufferedReader(new InputStreamReader(errorStream));
                    int error = 0;
                    errorOutput.write("Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText());
                    errorOutput.newLine();
                    errorOutput.newLine();
                    while ((line = errorReader.readLine()) != null) {
                        System.err.println(line); // Hata çıkışını hata akışına yaz
                        errorOutput.write(line);
                        errorOutput.newLine();
                        error++;
                        
                    }
                    errorOutput.close();
                    if(error == 0){
                        errorFile.delete();
                    }
                    System.out.println(isStuck + " ilki");
                    System.out.println(process.isAlive() + " alive");
                    isStuck = false;
                    
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    });
                   outputThread.start();
                   outputThread.join();
//            Thread serverCommunicationThread = new Thread(() -> {
//                try {
//                    while (isStuck) {
//                        Thread.sleep(5000); // 5 saniyede bir server ile iletişim kur
//
//                        // Servera "working" mesajı gönder
//                        client.emit("working", "");
//                    }
//                } catch (InterruptedException e) {
//                    e.printStackTrace();
//                }
//            });
                //serverCommunicationThread.start();
System.out.print("process while sonrası" + isStuck);
                // ExecutorService'i kapatmayı unutmayın
//            client.off("exit_app");
//            client.off("new_file");
//            client.off("sending");
//            client.off("send_finish_execute");
//            client.off("stop");
//            client.off("keep_going");
//            client.off("deneme_sending");
//            
//            client.off("deneme_send_file");
//            client.off("send_finish");
//            client.off("server_file");
            client.off();
            System.out.println(client.connected() + " :con");
//            if(!client.connected()){
//                System.out.println("baglı deil");
//                client.open();
//                String userName = txtName.getText().trim();
//                client.emit("set_user",userName);
//                System.out.println("yolladı isim");
//            }
            client.off();
            client.close();
            
             //client.disconnect();
              //client.close();
              Thread.sleep(700);
              client = IO.socket("http://" + IP + ":" + DEFAULT_PORT);
//            String userName = txtName.getText().trim();
//            client.emit("set_user",userName);
            //client.open();
            
            client.on("exit_app", new Emitter.Listener(){
               @Override
               public void call(Object... os){
                   System.exit(0);
               }
            });
            client.on("new_file", new Emitter.Listener(){
               @Override
               public void call(Object... os){
                   try{
                       addFile(new DataFileServer((JSONObject)os[0]));
                   }catch(JSONException e){
                   e.printStackTrace();
               }
               }
            });
            client.on("server_file", new Emitter.Listener() {
                
                @Override
                public void call(Object... os) {
                   JSONObject data = (JSONObject) os[0];
                   try{
                    
                    fileName = data.getString("fileName");
                    if(data.getInt("code") == 1){
                        executeFile = fileName;
                        executeFileSize = (long)data.getLong("fileSize");
                    }else if(data.getInt("code") == 3){
                        inputFile = fileName;
                        inputFileSize = (long)data.getLong("fileSize");
                    }else if(data.getInt("code") == 2){
                        exeFile = fileName;
                        
                    }
                    TaskNumber = data.getInt("taskNumber");
                    
                    initFileTransfer(fileName);
                    System.out.println("task number: " + TaskNumber);
                    System.out.println(data.get("fileName"));
                    System.out.println(data.get("fileSize"));
                    System.out.println(data.getString("param"));
                    paramFile = data.getString("param");
                   }catch(Exception e){
                       e.printStackTrace();
                   }
                    System.out.println("server_file içine girdi");
                    //client.emit("start_send", "1");
                    
                }
            });
            
            client.on("sending", new Emitter.Listener() {
                @Override
                public void call(Object... os) {
                    JSONObject data = (JSONObject) os[0];
                    try {
                        //System.out.println("geldi");
                        //System.out.println(data.getString("fileName"));
                        writeFile(data.getString("fileName"), data.getString("line"));
                                      //satır satır gelicek  
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
            });
            client.on("send_finish_execute", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("execute");
//                    try{
//                        Thread.sleep(1000);
//                    }catch(Exception e){
//                        e.printStackTrace();
//                    }                  
                    executeFile();
                }  
            });
            
            client.on("stop", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("tasks finished");  
                    System.out.println(executeFile + " " + inputFile + " " + paramFile);
                    client.emit("processTime", processTime + "_" + totalTaskNumber);
                    System.out.println(processTime);
                    
                }  
            });
            client.on("keep_going", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    System.out.println("keep going geldi");
                    }  
            });
            client.on("send_name", new Emitter.Listener(){
                @Override
                public void call(Object... os){
                    String userName = txtName.getText().trim();
                    System.out.println("isim gönderiyo:" + userName);
                    client.emit("set_user",userName);
                    }  
            });
            client.open();
            
            
            System.out.println("Threadler bitti  " + client.connected());
            long processFinish = System.currentTimeMillis();
            processTime += (processFinish-startTime);
                try{
                    int exitCode = 0;
                    System.out.println("exit code:" + exitCode);
                    if(exitCode != 0){
                        System.out.println("exit girdiiiiii");
                        File outputFile = new File(TaskNumber + "_output.txt");
                        outputFile.delete();
                        File errorFile = new File(TaskNumber + "_ErrorOutput.txt");
                        if(!errorFile.exists()){
                            errorFile.createNewFile();
                        }
                        System.out.println("error dosyası olusturdu mu : " + errorFile.exists());
                        BufferedWriter errorOutput = new BufferedWriter(new FileWriter(TaskNumber + "_ErrorOutput.txt"));
                        errorOutput.write("Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText());
                        errorOutput.newLine();
                        errorOutput.newLine();
                        errorOutput.write("!!! Stuck in infinite loop !!!");
                        errorOutput.newLine();
                        errorOutput.close();
                        isInfinite = 1;
                    }

                }catch(Exception e){
                    e.printStackTrace();
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }else{
            String command = "";
            command = "python C:/client/" + executeFile;
            System.out.println("bu : " + executeFile + " in: " + inputFile);
            if(inputFile != "" && paramFile != ""){
                command = "python C:/client/" + executeFile + " C:/client/" + inputFile + " " + paramFile;
            }
            else if(paramFile != "" && inputFile == ""){
                command = "python C:/client/" + executeFile + " " + paramFile;
            }else if(paramFile == "" && inputFile != ""){
                command = "python C:/client/" + executeFile + " C:/client/" + inputFile;
            }
            File file = new File("C:/client/" + executeFile);
            System.out.println(file.length());
            System.out.println("command: " + command + " exe:" + exeFile);
            
            try{
                Process process = Runtime.getRuntime().exec(command);
                InputStream inputStream = process.getInputStream();
                InputStream errorStream = process.getErrorStream();
                
            Thread outputThread = new Thread(() ->  {
                    try{
                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    File outputFile = new File(TaskNumber + "_output.txt");
                    outputFile.createNewFile();

                    BufferedWriter writeOutput = new BufferedWriter(new FileWriter(TaskNumber + "_output.txt"));
                    writeOutput.write("Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText());
                    writeOutput.newLine();
                    writeOutput.newLine();
                    while((line = reader.readLine()) != null){
                        System.out.println(line);
                        writeOutput.write(line);
                        writeOutput.newLine();
                        
                    }
                    writeOutput.close();
                    File errorFile = new File(TaskNumber + "_ErrorOutput.txt");
                    errorFile.createNewFile();
                    BufferedWriter errorOutput = new BufferedWriter(new FileWriter(TaskNumber + "_ErrorOutput.txt"));
                    BufferedReader errorReader = new BufferedReader(new InputStreamReader(errorStream));
                    int error = 0;
                    errorOutput.write("Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText());
                    errorOutput.newLine();
                    errorOutput.newLine();
                    while ((line = errorReader.readLine()) != null) {
                        System.err.println(line); // Hata çıkışını hata akışına yaz
                        errorOutput.write(line);
                        errorOutput.newLine();
                        error++;
                        
                    }
                    errorOutput.close();
                    if(error == 0){
                        errorFile.delete();
                    }
                    System.out.println(isStuck + " ilki");
                    System.out.println(process.isAlive() + " alive");
                    isStuck = false;
                    
                    }catch(Exception e){
                        e.printStackTrace();
                    }
            });
            Thread timeoutThread = new Thread(() -> {
                try {
                    long start = System.currentTimeMillis();
                    while (isStuck) {
                        Thread.sleep(100); // Küçük bir süre bekleyerek işlemciyi diğer işlemlere bırak
                        long elapsedTime = System.currentTimeMillis() - start;

                        if (elapsedTime > 3000) {
                           if (process.isAlive()) {
                                System.out.println("Belirli süre geçti, ancak process hala çalışıyor. İşlem sonlandırılıyor.");
                                process.destroy();
                            }
                            break;
                        }
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            outputThread.start();
            timeoutThread.start();   
            outputThread.join(); // outputThread'in bitmesini bekler
            timeoutThread.join();
            long processFinish = System.currentTimeMillis();
            processTime += (processFinish-startTime);
                try{
                    
                    int exitCode = process.waitFor();
                    System.out.println("exit code:" + exitCode);
                    if(exitCode != 0){
                        System.out.println("exit girdiiiiii");
                        File outputFile = new File(TaskNumber + "_output.txt");
                        outputFile.delete();
                        File errorFile = new File(TaskNumber + "_ErrorOutput.txt");
                        if(!errorFile.exists()){
                            errorFile.createNewFile();
                        }
                        System.out.println("error dosyası olusturdu mu : " + errorFile.exists());
                        BufferedWriter errorOutput = new BufferedWriter(new FileWriter(TaskNumber + "_ErrorOutput.txt"));
                        errorOutput.write("Task is executed as: " + executeFile + " " + inputFile + " " + paramFile + " by Client -> " + txtName.getText());
                        errorOutput.newLine();
                        errorOutput.newLine();
                        errorOutput.write("!!! Stuck in infinite loop !!!");
                        errorOutput.newLine();
                        errorOutput.close();
                        isInfinite = 1;
                    }

                }catch(InterruptedException e){
                    e.printStackTrace();
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        
        isStuck = true;
        System.out.println(executeFile + " " + inputFile +  " " + paramFile + " task bitti!");
        File file,file2,file3;
        if(os.equals("linux")){
            String userName = System.getProperty("user.home");
            file = new File(userName + "/Desktop/dist/" + executeFile);
            file2 = new File(userName + "/Desktop/dist/" + exeFile);
            file3 = new File(userName + "/Desktop/dist/" + inputFile);
        }else{
            //System.out.println("windows" + fileName);
            file = new File("C:/client/" + executeFile);
            file2 = new File("C:/client/" + executeFile);
            file3 = new File("C:/client/" + inputFile);  
        }
        file.delete();
        
        if(inputFile != ""){
            file3.delete();
        }
        if(exeFile != ""){
            file2.delete();
        }
        File folder;
        if(os.equals("linux")){
            String userName = System.getProperty("user.home");
            folder = new File(userName + "/Desktop/dist");
            
        }else{
            //System.out.println("windows" + fileName);
            folder = new File("C:/client");
        }
        String workingDirectory = System.getProperty("user.dir");
        File directory = new File(workingDirectory);
        int index = 0;
        File[] folderFiles = directory.listFiles();
        ArrayList<File> deleteFiles = new ArrayList<>();
        int flag = 0;
        if (folderFiles != null) {
            // Zaman aralığındaki değişiklikleri tespit et
            for (File filess : folderFiles) {
                long fileLastModifiedTime = filess.lastModified();
                if (fileLastModifiedTime >= startTime) {
                    System.out.println("silinmesi lazım: " + filess.getName());
                    deleteFiles.add(filess);
                    index++;
                }
            }
        }
        Collections.sort(deleteFiles, Comparator.comparingLong(File::length));
        folderFiles = directory.listFiles();
        int i = 0,send = 0;
        if(deleteFiles.size() > 0){
            for(int j = 0; j < deleteFiles.size(); j++){
                try{
                    if(j == deleteFiles.size() - 1) send = 1;
                    String userName = txtName.getText().trim();
                    DataReader reader = new DataReader(deleteFiles.get(j),table,send,userName);
                        model.addRow(reader.toRowTable(table.getRowCount() + 1));
                        Date date = new Date();
                        System.out.println(date.toString());
                        reader.startSend(client,TaskNumber,send, isInfinite);
                        flag = 1;
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
//         if (folderFiles != null) {
//            // Zaman aralığındaki değişiklikleri tespit et
//            for (File filess : folderFiles) {
//                long fileLastModifiedTime = filess.lastModified();
//                if (fileLastModifiedTime >= startTime) {
//                    i++;
//                    if(i==index) send = 1;
//                    try{
//                        System.out.println("index: " + index + " send: " + send + " dosya: " + filess.getName());
//                        DataReader reader = new DataReader(filess,table);
//                        model.addRow(reader.toRowTable(table.getRowCount() + 1));
//                        Date date = new Date();
//                        System.out.println(date.toString());
//                        reader.startSend(client,TaskNumber,send, isInfinite);
//                        flag = 1;
//                    }catch(Exception e){
//                        e.printStackTrace();
//                    }
//                }
//            }
//        }
         if(flag == 0){
            System.out.println("GİRMEMESİ LAZIMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
            client.emit("send_new_task","");
        }
        
        
        System.out.println("bitti task");
        //client.emit("send_new_task","");
        executeFile = "";
        inputFile = "";
        paramFile = "";
        exeFile = "";
        totalTaskNumber++;
    }
    private void initFileTransfer(String fileNameString) throws IOException{
        String os = System.getProperty("os.name").toLowerCase();
        File file;
        if(os.equals("linux")){
            String userName = System.getProperty("user.home");
            file = new File(userName + "/Desktop/dist/" + fileNameString);
            file.createNewFile();
        }else{
            //System.out.println("windows" + fileName);
            file = new File("C:/client/" + fileNameString);
            file.createNewFile();
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        JFileChooser ch = new JFileChooser();
//        ch.setMultiSelectionEnabled(true);
//        int opt = ch.showOpenDialog(this);
//        if(opt == JFileChooser.APPROVE_OPTION){
//            File[] files = ch.getSelectedFiles();
//            for(File file : files){
//                try{
//                    DataReader reader = new DataReader(file,table,1,"");
//                    model.addRow(reader.toRowTable(table.getRowCount() + 1));
//                    reader.startSend(client,TaskNumber,1,0);
//                }catch(Exception e){
//                    e.printStackTrace();
//                }
//            }
//        }
            try{
            client = IO.socket("http://" + "10.1.91.160" + ":" + DEFAULT_PORT);
            client.on("sa", new Emitter.Listener() {
                @Override
                public void call(Object... os) {
                    JSONObject data = (JSONObject) os[0];
                    try {
                        //System.out.println("geldi");
                        //System.out.println(data.getString("fileName"));
                        //writeFile(data.getString("fileName"), data.getString("line"));
                                      //satır satır gelicek  
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
            });
            client.open();
            System.out.println(client.hashCode());
            System.out.println(client.id());
            client.emit("as", "");
            
                client.on("sa", new Emitter.Listener() {
                    @Override
                    public void call(Object... os) {
                        client.emit("as", os);
                    }
                });
           
            
            try{
                
            Process process = Runtime.getRuntime().exec("python3 deneme.py");
                    System.out.println("process başladı");
                    Thread outputThread = new Thread(() -> {
                        try{
                    InputStream inputStream = process.getInputStream();
                    InputStream errorStream = process.getErrorStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    int x = 0;
                    while((line = reader.readLine()) != null){
                        x++;
                        if(x % 5 == 0){
                            System.out.println(line);
                        }
                      
                        
                    }
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                    });
                    outputThread.start();
                    outputThread.join();
                    System.out.println("bitti");
                    client.emit("bitti", "");
            }catch(IOException e){
                e.printStackTrace();
            }
           
            //client.disconnect();
            //client.connect();
            System.out.println(client.hashCode());
            System.out.println(client.id());
            }catch(Exception e){
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void addFile(DataFileServer data){
        
        modelFile.addRow(data.toTableRow(tableFile.getRowCount()+1));
    }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
                                             
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdConnect;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable table;
    private javax.swing.JTable tableFile;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
