/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package server;

import Data.DataClient;
import Data.DataFileSending;
import Data.DataFileServer;
import Data.DataInitFile;
import Data.DataReader;
import Data.DataWriter;
import com.corundumstudio.socketio.AckRequest;
import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.listener.ConnectListener;
import com.corundumstudio.socketio.listener.DataListener;
import com.corundumstudio.socketio.listener.DisconnectListener;
import io.socket.client.Ack;
import io.socket.client.Socket;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.security.Policy;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author zekican
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        
        initComponents();

        table.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1){
                Object data = jtable.getValueAt(i, 0);
                if(data instanceof DataClient){
                    return ((DataClient) data).getStatus();
                }else{
                    return super.getTableCellRendererComponent(jtable, o, bln1, bln1, i, i1);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JPopupMenu();
        disconnect = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cmdStart = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        startExperimentButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        taskNumbertxt = new javax.swing.JLabel();
        remainstxt = new javax.swing.JLabel();
        exptimetxt = new javax.swing.JLabel();

        disconnect.setText("Disconnect This Client");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });
        menu.add(disconnect);

        jScrollPane2.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "No", "Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(0);
            table.getColumnModel().getColumn(0).setPreferredWidth(0);
            table.getColumnModel().getColumn(0).setMaxWidth(0);
            table.getColumnModel().getColumn(1).setPreferredWidth(50);
            table.getColumnModel().getColumn(2).setPreferredWidth(50);
            table.getColumnModel().getColumn(3).setPreferredWidth(300);
        }

        cmdStart.setBackground(new java.awt.Color(0, 0, 204));
        cmdStart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmdStart.setForeground(new java.awt.Color(255, 255, 255));
        cmdStart.setText("Start Server");
        cmdStart.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        cmdStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartActionPerformed(evt);
            }
        });

        jButton1.setText("Upload File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        jLabel1.setText("Define Experiment");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Upload Script File");

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 2, 16)); // NOI18N

        startExperimentButton.setBackground(new java.awt.Color(204, 255, 255));
        startExperimentButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        startExperimentButton.setText("Start Experiment");
        startExperimentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startExperimentButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 20)); // NOI18N

        taskNumbertxt.setBackground(new java.awt.Color(51, 51, 51));
        taskNumbertxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        remainstxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        exptimetxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1041, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cmdStart))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(helpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(106, 106, 106)
                                        .addComponent(startExperimentButton))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(taskNumbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(172, 172, 172))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(remainstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exptimetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(helpButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(taskNumbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(remainstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startExperimentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exptimetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdStart)
                .addGap(7, 7, 7))
        );

        taskNumbertxt.getAccessibleContext().setAccessibleName("taskNumbertxt");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private final int DEFAULT_PORT = 9999;
    private SocketIOServer server;
    //private File[][] taskList;
    ArrayList<ArrayList<File>> taskList = new ArrayList<>();
    Map<SocketIOClient, Integer> clientTask = new HashMap<>();
    Map<SocketIOClient, String> clientNames = new HashMap<>();
    Map<String,ArrayList<Integer>> exeList = new HashMap<>();
    Map<String,File> afterWaitTasks = new LinkedHashMap<>();
    Map<String,String> afterWaitOutput = new HashMap<>();
    Map<String,String> outputExe = new HashMap<>();
    ArrayList<String> paramList = new ArrayList<>();
    Map<String,String> totalTasks = new HashMap<>();
    ArrayList<Integer> taskNumList = new ArrayList<>();
    ArrayList<Integer> infiniteTaskList = new ArrayList<>();
    Map<Integer,String> newTaskDir = new HashMap<>();
    private File[] sourceFiles;
    private File[] paramFiles = new File[0];
    private File[] inputFiles = new File[0];
    ArrayList<Integer> taskCodes = new ArrayList<>();
    private int clientNumber = 0;
    private int taskNumber = 0;
    private int infiniteTaskNumber = 0;
    private int totalWait = 1;
    private  RandomAccessFile accFile;
    private ExecutorService executorService;
    private long expStartTime;
    private int isExperimentDone = 0;
    private int processCounter = 0;
    private int expPart = 1;
    private BufferedWriter writeOutput;
    private final List<DataFileServer> listFiles = new ArrayList<>();
    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed
        Configuration configuration = new Configuration();
        
        //configuration.setHostname("18");
        configuration.setPort(DEFAULT_PORT);
        configuration.setHostname("10.1.91.160");
//        configuration.setPingTimeout(2500000);
//        configuration.setPingInterval(2500000);
        server = new SocketIOServer(configuration);
       
        System.out.println(configuration.getHostname());
        server.addConnectListener(new ConnectListener(){
                @Override
                public void onConnect(SocketIOClient sioc){
                    //runs when new client connected
                    System.out.println(sioc.getSessionId());
                    
                    server.getClient(sioc.getSessionId()).sendEvent("send_name", "");
                    //DataClient client = new DataClient(sioc,"",table);
                    //add data to table
                    //addTableRow(client);
                }                        
        });
        
        server.addDisconnectListener(new DisconnectListener(){
                @Override
                public void onDisconnect(SocketIOClient sioc){
                    System.out.println("koptu:" + sioc.getSessionId());
                    
                    //removeClient(sioc);
//                    if(isExperimentDone == 0){
//                        System.out.println("alooooooo" + taskList.get(clientTask.get(sioc)) + "clienttask.get:" + clientTask.get(sioc));
//                        System.out.print("\n\n\n\n\n\n\n\n");
//                        taskList.add(taskList.get(clientTask.get(sioc)));
//                        paramList.add(paramList.get(clientTask.get(sioc)));
//                        taskCodes.add(taskCodes.get(clientTask.get(sioc)));
//                        taskNumList.add(taskList.size());
//                        if(server.getAllClients().size() > 0){
//                            newTaskDir.put(taskList.size(), taskList.size() + "_newTask" + (clientTask.get(sioc)+1));
//                            File folder = new File("E:/socket_data","Task" + taskList.size() + "_newTask" + (clientTask.get(sioc)+1));
//                            boolean isCreated = folder.mkdirs();
//                            File dizin = new File("E:/socket_data","Task" + (clientTask.get(sioc)+1));
//                            File[] dosyalar = dizin.listFiles();
//
//                            // Her bir dosya için kontrol yap
//                            if (dosyalar != null) {
//                                for (File dosya : dosyalar) {
//                                    if (dosya.isFile() && dosya.canWrite()) {
//                                        // Dosya yazılabilirse kapatmaya çalış
//                                        try {
//                                            System.out.println("Kapatılıyor: " + dosya.getName());
//                                            FileInputStream fileInputStream = new FileInputStream(dosya);
//                                            fileInputStream.close();
//                                            // Dosyayı kapatma işlemi burada gerçekleştirilir
//                                            // Örneğin: FileInputStream veya FileOutputStream kullanarak
//                                            // dosyayı açıp kapatma işlemi gerçekleştirilebilir.
//                                        } catch (Exception e) {
//                                            System.err.println("Hata: " + e.getMessage());
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
                }
        });
        server.addEventListener("set_user",String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                DataClient client = new DataClient(sioc,"",table);
                    //add data to table
                    addTableRow(client);
                System.out.println(sioc.getSessionId() + " name:" + t);
                setUserName(sioc,t);
                
                Iterator<Map.Entry<SocketIOClient, String>> iterator = clientNames.entrySet().iterator();
                while (iterator.hasNext()) {
                    Map.Entry<SocketIOClient, String> entry = iterator.next();

                    // Belirli bir değere sahip olan elemanı bulun
                    if (entry.getValue().equals(t)) {
                        // Elemanı silin
                        iterator.remove();
                        System.out.println("Değer silindi: " + entry.getValue());
                    }
                }
                clientNames.put(sioc, t);
        }
        });
        server.addEventListener("working",String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                //server.getClient(sioc.getSessionId()).sendEvent("keep_going", "");
                System.out.println("working");
        }
        });
        server.addEventListener("send_file", DataInitFile.class, new DataListener<DataInitFile>(){
            @Override
            public void onData(SocketIOClient sioc, DataInitFile t, AckRequest ar) throws Exception{
                synchronized(this){
                    System.out.println("get data initfile " + t.getinfinite() + " ->" + sioc.getSessionId());
                    
                    int fileID = initFileTransfer(sioc, t);
                    if(fileID > 0){
                        
                        ar.sendAckData(true,fileID);
                    }
                }
            }
        });
        server.addEventListener("sending", DataFileSending.class, new DataListener<DataFileSending>() {
            @Override
            public void onData(SocketIOClient sioc, DataFileSending t, AckRequest ar) throws Exception {
                synchronized(this){
                    System.out.println("sendinge geldi:" + sioc.getSessionId() + t.getclientName());
                    if(!t.isFinish()){
                        //System.out.println("sending geliyor");
                        writeFile(sioc, t);
                        ar.sendAckData(true);
                    }else{
                        System.out.println("sending geldi false");
                        ar.sendAckData(false);
                        DataFileServer data = closeFile(sioc,t);
//                        if(data != null){
//                            server.getBroadcastOperations().sendEvent("new_file", data);
//                        }
                    }
                }
            }
        });

        server.addEventListener("send_new_task", String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                synchronized(this){
                    sendTask(sioc);
                    Date date = new Date();
                    System.out.println("sendnewgeldi" + sioc.getSessionId() + date.toString());
                }
            }
        });
        server.addEventListener("can_execute", String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                server.getClient(sioc.getSessionId()).sendEvent("send_finish_execute", "");
            }
        });
        server.addEventListener("processTime", String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                synchronized (this) {
                    System.out.println("Process Tİme: " + t);
                try {
                    if (writeOutput == null) {
                        writeOutput = new BufferedWriter(new FileWriter("E:/socket_data/ClientPerformances/performances.txt"));
                    }
                    String[] parsedStrings = t.split("_");
                    String time = parsedStrings[0];
                    String TotalTaskNumber = parsedStrings[1];
                    DateFormat obj = new SimpleDateFormat("mm:ss");   
                    Date res = new Date(Long.parseLong(time));   
                    writeOutput.write("Client " + clientNames.get(sioc) + " -> " + " Total busy time: " + obj.format(res) + " Executed task number: " + TotalTaskNumber);
                    writeOutput.newLine();
                    processCounter++;
                    System.out.println("proces: " + processCounter + " " + clientNames.size());
                    if(processCounter == clientNames.size()){
                        try{
                            jLabel5.setText("Experiment is finished... You can check the outputs.");
                            long endTime = System.currentTimeMillis();
                            DateFormat experimentTime = new SimpleDateFormat("mm:ss");   
                                // we create instance of the Date and pass milliseconds to the constructor    
                            Date dateExp = new Date(endTime-expStartTime);   
                                // now we format the res by using SimpleDateFormat   
                            System.out.println(experimentTime.format(dateExp));   
                            exptimetxt.setText("Total Experiment Time: " + obj.format(dateExp));
                            isExperimentDone = 1;
                            closeOutputWrite();
                        }catch(Exception e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println("process çıktı" + sioc.getSessionId());
                    
                    } catch (IOException e) {
                        // Dosya ile ilgili bir hata durumu
                        e.printStackTrace();
                    }
                    
                }
                }
            });
            server.start();
    }//GEN-LAST:event_cmdStartActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        if(table.getSelectedRow() >= 0){
            int row = table.getSelectedRow();
            DataClient data = (DataClient) table.getValueAt(row, 0);
            data.getClient().sendEvent("exit_app", "");
        }
    }//GEN-LAST:event_disconnectActionPerformed

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        if(table.getSelectedRow() >= 0 && SwingUtilities.isRightMouseButton(evt)){
            menu.show(table, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableMouseReleased
    
    //Upload executeble file button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser ch = new JFileChooser();
        ch.setMultiSelectionEnabled(true);
        System.out.println("Upload basıldı");
        
        int opt = ch.showOpenDialog(this);
        if(opt == JFileChooser.APPROVE_OPTION){
            File[] files = ch.getSelectedFiles();
            sourceFiles = ch.getSelectedFiles();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        Configuration configuration = new Configuration();
        
        //configuration.setHostname("18");
        configuration.setPort(DEFAULT_PORT);
        configuration.setHostname("10.1.91.160");
//        configuration.setPingTimeout(2500000);
//        configuration.setPingInterval(2500000);
        server = new SocketIOServer(configuration);
       
        System.out.println(configuration.getHostname());
        server.addConnectListener(new ConnectListener(){
                @Override
                public void onConnect(SocketIOClient sioc){
                    //runs when new client connected
                    System.out.println(sioc.getSessionId());
                    //DataClient client = new DataClient(sioc,"",table);
                    //add data to table
                    //addTableRow(client);
                }                        
        });
        
        server.addDisconnectListener(new DisconnectListener(){
                @Override
                public void onDisconnect(SocketIOClient sioc){
                    System.out.println(sioc.getSessionId());
                    
                    //removeClient(sioc);
//                    if(isExperimentDone == 0){
//                        System.out.println("alooooooo" + taskList.get(clientTask.get(sioc)) + "clienttask.get:" + clientTask.get(sioc));
//                        System.out.print("\n\n\n\n\n\n\n\n");
//                        taskList.add(taskList.get(clientTask.get(sioc)));
//                        paramList.add(paramList.get(clientTask.get(sioc)));
//                        taskCodes.add(taskCodes.get(clientTask.get(sioc)));
//                        taskNumList.add(taskList.size());
//                        if(server.getAllClients().size() > 0){
//                            newTaskDir.put(taskList.size(), taskList.size() + "_newTask" + (clientTask.get(sioc)+1));
//                            File folder = new File("E:/socket_data","Task" + taskList.size() + "_newTask" + (clientTask.get(sioc)+1));
//                            boolean isCreated = folder.mkdirs();
//                            File dizin = new File("E:/socket_data","Task" + (clientTask.get(sioc)+1));
//                            File[] dosyalar = dizin.listFiles();
//
//                            // Her bir dosya için kontrol yap
//                            if (dosyalar != null) {
//                                for (File dosya : dosyalar) {
//                                    if (dosya.isFile() && dosya.canWrite()) {
//                                        // Dosya yazılabilirse kapatmaya çalış
//                                        try {
//                                            System.out.println("Kapatılıyor: " + dosya.getName());
//                                            FileInputStream fileInputStream = new FileInputStream(dosya);
//                                            fileInputStream.close();
//                                            // Dosyayı kapatma işlemi burada gerçekleştirilir
//                                            // Örneğin: FileInputStream veya FileOutputStream kullanarak
//                                            // dosyayı açıp kapatma işlemi gerçekleştirilebilir.
//                                        } catch (Exception e) {
//                                            System.err.println("Hata: " + e.getMessage());
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
                }
        });
        server.addEventListener("bitt",String.class, new DataListener<String>(){
            @Override
            public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception{
                //server.getClient(sioc.getSessionId()).sendEvent("keep_going", "");
                System.out.println("bitti geldi");
        }
        });
        
        server.start();
        int x = 0;
        while(x < 99999999){
            if(x % 5 == 0){
                //server.getBroadcastOperations().sendEvent("sa", paramFiles);
            }
            x++;
        }
        try{
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "C:\\Users\\zekican\\Desktop\\Configuration.pdf");
            System.out.println("girdi");
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    
    private void createTaskPool() throws FileNotFoundException{
        BufferedReader reader = new BufferedReader(new FileReader(sourceFiles[0]));
        String line;
        //taskList = new File[12][];
        
        int index = 0;
        int waitCounter = 0;
        Map<String,File> mapFile = new HashMap<>();
        Map<String,File[]> mapDir = new HashMap<>();
        Map<String,String> mapParam = new HashMap<>();
        Map<String,ArrayList<String>> mapParams = new HashMap<>();
        Map<String, String> mapOutput = new HashMap<>();
        try{
            
            while ((line = reader.readLine()) != null) {
                String patternInput = "^var_if\\s+(\\w+)\\s*=\\s*\"([^\"]*)\"$";
                String patternSource = "^var_exe\\s+(\\w+)\\s*=\\s*(\\S+)\\s+(\\S+)$";
                String patternInputDir = "^var_id\\s+(\\w+)\\s*=\\s*\"([^\"]*)\"$";
                String patternParam = "^var_p\\s+(\\w+)\\s*=\\s*\"([^\"]*)\"$";
                String patternParamList = "^var_pl\\s+(\\w+)\\s*=\\s*\\[(.*?)\\]$";
                String patternSourceWithParam = "^var_exe\\s+(\\w+)\\s*=\\s*([^\\s]+)\\s+([^\\s]+)\\s+([^\\s]+)$";
                String patternOutput = "^var_out\\s+(\\w+)\\s*=\\s*(\\w+)$";
                
                Pattern p1 = Pattern.compile(patternInput);
                Matcher m1 = p1.matcher(line);
                
                Pattern p2 = Pattern.compile(patternSource);
                Matcher m2 = p2.matcher(line);
                
                Pattern p3 = Pattern.compile(patternInputDir);
                Matcher m3 = p3.matcher(line);
                
                Pattern p4 = Pattern.compile(patternParam);
                Matcher m4 = p4.matcher(line);
                
                Pattern p5 = Pattern.compile(patternParamList);
                Matcher m5 = p5.matcher(line);
                
                Pattern p6 = Pattern.compile(patternSourceWithParam);
                Matcher m6 = p6.matcher(line);
                
                Pattern p7 = Pattern.compile(patternOutput);
                Matcher m7 = p7.matcher(line);
                
                if (m1.find()) { // defining input file 
                    String variableName = m1.group(1);
                    String filePath = m1.group(2);
                    System.out.println("Değişken Adı: " + variableName);
                    System.out.println("Dosya Yolu: " + filePath);
                    File file = new File(filePath);
                    mapFile.put(variableName, file);
                    
                } else if(m2.find()){ // exe case with one parameter
                    
                    String variableName = m2.group(1);
                    String filePath = m2.group(2);
                    String inputFileName = m2.group(3);
                    
                    if(mapFile.containsKey(inputFileName)){
                        File file = new File(filePath);
                        File file2 = new File(mapFile.get(inputFileName).getPath());
                        mapFile.put(variableName, file);
                        ArrayList<File> fileRow = new ArrayList<>();
                        fileRow.add(file);
                        fileRow.add(file2);
                        taskList.add(fileRow);
                        ArrayList<Integer> variableIndex = new ArrayList<>();
                        
                        variableIndex.add(index);
                        exeList.put(variableName, variableIndex);
                        paramList.add("");
                        taskCodes.add(2);
                        index++;
                        
                    }else if(mapDir.containsKey(inputFileName)){
                        
                        File file = new File(filePath);
                        File[] files = mapDir.get(inputFileName);
                        ArrayList<Integer> temp = new ArrayList<>();
                        exeList.put(variableName, temp);
                        for(int i = 0; i < files.length; i++){
                            ArrayList<File> fileRow = new ArrayList<>();
                            fileRow.add(file);
                            fileRow.add(files[i]);
                            taskList.add(fileRow);   
                            paramList.add("");
                            taskCodes.add(2);
                            /// Düzelttttt!!!!!!!!!!!!!!!!!!!!!!!
                            ArrayList<Integer> variableIndex = new ArrayList<>();                           
                            variableIndex = exeList.get(variableName);
                            variableIndex.add(index);
                            exeList.put(variableName, variableIndex);
                            System.out.println("exe girdi");
                            index++;
                        }
                    } else if(mapParam.containsKey(inputFileName)){
                        // if has parameter
                        System.out.println("param girdi");
                        File file = new File(filePath);
                        String parameter = mapParam.get(inputFileName);
                        mapFile.put(variableName, file);
                        ArrayList<File> fileRow = new ArrayList<>();
                        fileRow.add(file);
                        taskList.add(fileRow);
                        paramList.add(parameter);
                        totalTasks.put(file.getName(),parameter);
                        taskCodes.add(1);
                        index++;
                        
                    } else if(mapParams.containsKey(inputFileName)){
                        // if has parameteres
                        System.out.println("params girdi");
                        File file = new File(filePath);
                        ArrayList<String> parameters = new ArrayList<>();
                        parameters = mapParams.get(inputFileName);
                        for(int i = 0; i < parameters.size(); i++){
                            ArrayList<File> fileRow = new ArrayList<>();
                            fileRow.add(file);
                            taskList.add(fileRow);
                            paramList.add(parameters.get(i));
                            totalTasks.put(file.getName(),parameters.get(i));
                            taskCodes.add(1);
                            index++;
                        }
                    } else if(mapOutput.containsKey(inputFileName)){
                        System.out.println("output olan bir exe geldi");
                        File file = new File(filePath);
                        afterWaitTasks.put(variableName, file);
                        afterWaitOutput.put(variableName, inputFileName);
                    }
                    
                    
                } else if(m3.find()){
                    
                    String value = m3.group(1);
                    String file = m3.group(2);
                    File dir = new File(file);
                    File[] files = dir.listFiles();
                    mapDir.put(value, files);
                    
                } else if(m4.find()){
                    
                    String value = m4.group(1);
                    String param = m4.group(2);
                    mapParam.put(value, param);
                    
                } else if(m5.find()){
                    
                    String variableName = m5.group(1);
                    String listContent = m5.group(2);
                    String[] valuesArray = listContent.split("\\s*,\\s*");
                    
                    ArrayList<String> paramValues = new ArrayList<>(Arrays.asList(valuesArray));
                    mapParams.put(variableName,paramValues);

                } else if(m6.find()){
                    String variableName = m6.group(1);
                    String filePath = m6.group(2);
                    String param1 = m6.group(3);
                    String param2 = m6.group(4);
                    
                    if(mapFile.containsKey(param1)){
                        
                        File file = new File(filePath);
                        File file2 = new File(mapFile.get(param1).getPath());
                        File file3 = null;
                        if(mapFile.containsKey(param2)){
                            file3 = new File(mapFile.get(param2).getPath());
                        }
                        //System.out.println("iscrea:" + file3.exists());
                        mapFile.put(variableName, file);
                        ArrayList<File> fileRow = new ArrayList<>();
                        fileRow.add(file);
                        fileRow.add(file2);
                        if(file3 != null) fileRow.add(file3);
                        ////taskList.add(fileRow);
                        taskCodes.add(3);
                        if(mapParam.containsKey(param2)){
                            String parameter = mapParam.get(param2);
                            paramList.add(parameter);
                            taskList.add(fileRow);
                            index++;
                        }else if(mapParams.containsKey(param2)){
                            ArrayList<String> parameters = new ArrayList<>();
                            parameters = mapParams.get(param2);
                            for(int i = 0; i < parameters.size(); i++){
                                taskList.add(fileRow);
                                paramList.add(parameters.get(i));
                                totalTasks.put(file.getName(),parameters.get(i));
                                taskCodes.add(1);
                                index++;
                            }
                        }else if(mapFile.containsKey(param2)){
                            taskList.add(fileRow);
                            paramList.add("");
                            index++;
                        }
                                   
                    } else if(mapDir.containsKey(param1)){
                        
                        File file = new File(filePath);
                        File[] files = mapDir.get(param1);
                        File file2 = null;
                        if(mapFile.containsKey(param2)){
                            file2 = new File(mapFile.get(param2).getPath());
                        }
                        for(int i = 0; i < files.length; i++){
                            ArrayList<File> fileRow = new ArrayList<>();
                            fileRow.add(file);
                            fileRow.add(files[i]);
                            if(file2 != null) fileRow.add(file2);
                            taskList.add(fileRow);
                            taskCodes.add(2);
                            paramList.add("");
                            index++;
                        }                       
                    } 
                } else if(m7.find()){
                    String variableName = m7.group(1);
                    String exeName = m7.group(2);
                    System.out.println("output:" + variableName + " " + exeName);
                    outputExe.put(variableName, exeName);
                    mapOutput.put(variableName, exeName);
                    
                }
                if(line.equals("Wait")){
                    if(waitCounter>0){
                        afterWaitTasks.put("wait"+waitCounter, null);
                        System.out.println("wait" + waitCounter + " eklendi");
                    }
                    waitCounter++;
                    System.out.println("wait geldi" + waitCounter + " " + afterWaitTasks.get("wait"+(waitCounter-1)));
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        System.out.println("index:" + index + " tasklist: " + taskList.size());
        for(int i = 0; i < index; i++){
                for(int j = 0; j < taskList.get(i).size(); j++){
                    System.out.println(taskList.get(i).size() + "budur size");
                    System.out.println(taskList.get(i).get(j) + " param: " + paramList.get(i));
                }
                taskNumList.add(i+1);
                File folder = new File("E:/socket_data","Task" + (i+1));
                boolean isCreated = folder.mkdirs();
                System.out.println();
        }
        File processFile = new File("E:/socket_data","ClientPerformances");
        boolean isCreated = processFile.mkdirs();
        File processFileCreate = new File("E:/socket_data/ClientPerformances/performances.txt");
        try{
            if(!processFileCreate.exists()) processFileCreate.createNewFile();
        }catch(Exception e){
            e.printStackTrace();
        }
        jLabel2.setText("Total Task Number in Experiment");
        taskNumbertxt.setText(String.valueOf(index));
        remainstxt.setText("Remains -> " + String.valueOf(index));
    }
    private void exeParameter(){
        
    }
    
    private void startExperimentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startExperimentButtonActionPerformed
        jLabel5.setText("Experiment is being created...");
        expStartTime = System.currentTimeMillis();
        Thread taskPoolThread = new Thread(() ->  {    
            try{
                createTaskPool();
            }catch(Exception e){
                e.printStackTrace();
            }
        });
        taskPoolThread.start();
        try{
            taskPoolThread.join();
        }catch(Exception e){
            e.printStackTrace();
        }
        startExp(expPart);
        
    }//GEN-LAST:event_startExperimentButtonActionPerformed
    private void startExp(int part){
        System.out.println("deney şimdi başlıyoo");
        //Collection<SocketIOClient> clients;
        System.out.println("all clients:" + server.getAllClients().size() + " clients:" + clientNames.size());
        List<SocketIOClient> clients = new ArrayList<>(clientNames.keySet());
        
        //executorService = Executors.newCachedThreadPool();   
        //List<CompletableFuture<Void>> futures = new ArrayList<>();
        for (SocketIOClient client : clients) {
            //File[] files = taskList[taskNumber];
            //Thread taskThread = new Thread(() ->  { 
                System.out.println("->"+clientNames.get(client));
                sendTask(client);
            //});
            //try{
              //  taskThread.start();
               // taskThread.join();
            //}catch(Exception e){
              //  e.printStackTrace();
            //}
            
//            clientTask.put(client, taskNumber);
//            
//            ArrayList<File> files = taskList.get(taskNumber);
//            String param = paramList.get(taskNumber); 
//            int taskNum = taskNumList.get(taskNumber);
//            for (File file : files) {
//                //CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
//                    try {
//                        DataReader reader = new DataReader(file, table);                        
//                        reader.startSend(server, client.getSessionId().toString(), taskNumber, taskList, taskCodes, files, paramList, totalTasks,param,taskNum);
//                        
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                //}, executorService);
//                //futures.add(future);               
//            }
//            taskNumber++;
//        }
//        //CompletableFuture<Void> allOf = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
//        //allOf.join();
//        try{
//            Thread.sleep(1000);
//        }catch(Exception e){
//            e.printStackTrace();
//        }
//        
//        server.getBroadcastOperations().sendEvent("send_finish_execute", "");

        
        }
        jLabel5.setText("Experiment part " + part + " is started...");
    }
    
    private void sendTask(SocketIOClient client){
        
        remainstxt.setText("Remains -> " + String.valueOf(taskList.size()-taskNumber));
        if((taskList.size()-taskNumber) == 0) jLabel5.setText("Waiting for outputs...");
        //önceki taskına mapten bakıp hatalı mı deil mi bakabilirim hatalıysa infinite mi infinitese eğer kaçkncı kez geldi task ona bak
        System.out.println("sendTask: " + client.getSessionId());
        System.out.println(taskList.size() + " " + taskNumber);
        if(taskNumber < taskList.size()){
            //File[] files = taskList[taskNumber];
            clientTask.put(client, taskNumber);
            ArrayList<File> files = taskList.get(taskNumber);
            System.out.println(taskList.get(taskNumber));
            int index = 1;
            int taskNum = taskNumList.get(taskNumber);
            String param = paramList.get(taskNumber); 
            for (File file : files) {
                try {
                    DataReader reader = new DataReader(file, table);
                    System.out.println("index = " + index + " leng: " + files.size());
                    if(index == files.size()){
                        reader.startSend2(server, client.getSessionId().toString(), 1, taskList, taskCodes, files, paramList, param, taskNum);
                    }else{
                        reader.startSend2(server, client.getSessionId().toString(), 0, taskList, taskCodes, files, paramList, param, taskNum);
                    }
                    
                    index++;
                } catch (Exception e) {
                    e.printStackTrace();
                }           
            }
            Date date = new Date();
            System.out.println(client.getSessionId() + "dosyalari gönderildi" + date.toString());
            taskNumber++;
            
           
            
        }else{
            //server.getClient(client.getSessionId()).sendEvent("stop", ""); 
            clientNumber++;
        }
        System.out.println("Client num:"  + clientNumber + " clientname size:" + clientNames.size());
        if(taskNumber == taskList.size()){
            System.out.println("Task Syısı bittii!!!!\n\n\n");
        }
        if(clientNumber == clientNames.size()){ //if all tasks finished
            System.out.println("bureaya giioooo");
            if(afterWaitTasks.size() > 0){
                Iterator<String> iterator = afterWaitTasks.keySet().iterator();
                while (iterator.hasNext()) {
                    String key = iterator.next();
                    
                    System.out.println("key: " + key);
                    if(key.equals("wait"+totalWait)){
                        System.out.println(key + " key geldi silip çıkıcak");
                        iterator.remove(); 
                        totalWait++;
                        
                        break;
                    }
                    ArrayList<Integer> indexList = new ArrayList<>();
                    //taskNumbertxt.setText(String.valueOf(taskList.size() + indexList.size()));
                    indexList = exeList.get(outputExe.get(afterWaitOutput.get(key)));
                    System.out.println("bu indexlist: " + indexList);
                    ArrayList<Integer> temp = new ArrayList<>();
                    exeList.put(key,temp);
                    for(int i = 0; i < indexList.size(); i++){
                        ArrayList<File> fileRow = new ArrayList<>();
                        fileRow.add(afterWaitTasks.get(key));
                        File outFile = new File("E:/socket_data/Task" + (indexList.get(i)+1));
                        File[] files = outFile.listFiles();
                        System.out.println("kontrol edilen dosya: " + "E:/socket_data/Task" + (indexList.get(i)+1));
                        if(files != null){
                            for(File checkFile : files){
                                if(!checkFile.getName().toLowerCase().contains("_output.txt")){
                                    fileRow.add(checkFile);
                                }
                            }
                        }
                        System.out.println("fileRow " + fileRow);
                        taskList.add(fileRow);
                        paramList.add("");
                        taskCodes.add(2);
                        ArrayList<Integer> exeArrayList = new ArrayList<>();
                        exeArrayList = exeList.get(key);
                        exeArrayList.add(taskNumList.size());
                        exeList.put(key,exeArrayList);
                        taskNumList.add(taskNumList.size()+1);
                        File folder = new File("E:/socket_data","Task" + (taskNumList.size()));
                        boolean isCreated = folder.mkdirs();
                        System.out.println("dosya oluşturmas");
                    }
                    System.out.println("for çıkışı");
                    iterator.remove();
                    System.out.println("remove");
                    
                    
                }
                System.out.println("start exp öncesii");
                System.out.println("sizeı:::: " + afterWaitTasks.size());
                clientNumber = 0;
                taskNumbertxt.setText(String.valueOf(taskList.size()));
                expPart++;
                startExp(expPart);
                
            } else{
                Set<SocketIOClient> keys = clientNames.keySet();

                // Anahtarları ekrana yazdır
                //System.out.println("Map'teki Tüm Anahtarlar:");
                for (SocketIOClient key : keys) {
                    server.getClient(key.getSessionId()).sendEvent("stop", ""); 
                    System.out.println("stop gönderiliyor " + key.getSessionId());
                }
                //server.getClient(client.getSessionId()).sendEvent("stop", ""); 
                jLabel5.setText("Experiment is finished... Waiting outputs");
                
                
            }
            System.out.println(afterWaitTasks.size());
            
        }
    } 
    public void closeOutputWrite() throws IOException {
        if (writeOutput != null) {
            writeOutput.close();
        }
    }
    private void addTableRow(DataClient data){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(data.toRowTable(table.getRowCount() + 1));
        //System.out.println(model.getRowCount());
    }
    
    private void removeClient(SocketIOClient client){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for(int i = 0; i < table.getRowCount(); i++){
            DataClient data = (DataClient) table.getValueAt(i, 0);
            if(data.getClient() == client){
                model.removeRow(i);
                break;
            }
        }
    }
    
    private void setUserName(SocketIOClient client, String name){
        System.out.println("bağlantı geldi isim:" + name + ".");
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int check = 0;
        for(int i = 0; i < table.getRowCount(); i++){
            DataClient data = (DataClient) table.getValueAt(i, 0);
            if(data.getName().equals(name)){
                data.setClient(client);
                model.setValueAt(name,i,2);
                check = 1;
                break;
            }
        } 
        if(check == 0 && name.length() > 0){
            for(int i = 0; i < table.getRowCount(); i++){
                DataClient data = (DataClient) table.getValueAt(i, 0);
                if(data.getClient() == client){
                    data.setName(name);
                    model.setValueAt(name,i,2);
                    break;
                }
            }
        }
    }

    private int initFileTransfer(SocketIOClient client,DataInitFile dataInit){
        int id=0;
        for(int i = 0; i < table.getRowCount(); i++){
            DataClient data = (DataClient) table.getValueAt(i, 0);
            if(data.getName().equals(dataInit.getclientName())){
                try{
                    
                    id = generateFileID();
                    if(newTaskDir.containsKey(dataInit.getTaskNumber())){
                        File file = new File("E:/socket_data/Task" + newTaskDir.get(dataInit.getTaskNumber())+ "/" + dataInit.getFileName());
                        if(!file.exists()) file.createNewFile();
                        if (file.canWrite()) {
                            // Dosya yazılabilirse işlemleri gerçekleştir
                            // Örneğin, dosyayı okuma veya yazma işlemleri
                            System.out.println("Dosya yazılabilir, işlemler gerçekleştirilebilir.");
                        } else {
                            System.out.println("Dosyaya yazma izniniz yok.");
                        }
                        DataWriter writer = new DataWriter(file, dataInit.getFileSize());
                        data.addWrite(writer, id);
                    }else{
                        File file = new File("E:/socket_data/Task" + dataInit.getTaskNumber() + "/" + dataInit.getFileName());
                        if(!file.exists()) file.createNewFile();
                        DataWriter writer = new DataWriter(file, dataInit.getFileSize());
                        data.addWrite(writer, id);
                    }
                    System.out.println("addWrite için id:" + id);
                    
                    System.out.println(dataInit.getinfinite());
                    if(dataInit.getinfinite() == 1 && !checkInfiniteFile(dataInit.getTaskNumber()-1)){
                        System.out.println("infinite girdi");
                        infiniteTaskList.add(dataInit.getTaskNumber()-1);
                        taskList.add(taskList.get(dataInit.getTaskNumber()-1));
                        paramList.add(paramList.get(dataInit.getTaskNumber()-1));
                        taskCodes.add(taskCodes.get(dataInit.getTaskNumber()-1));
                        taskNumList.add(dataInit.getTaskNumber());
                        //tasklist yap ekstra devam et burda ekleme send newde ekle burda eklersen hemen göndermeye kalkar hata verir vermez ya da dene
                        //task no tut bu clienttan new task geldiğinde ekle tekrar listeye bu taskı ama not et 2. dönüşten sonra sil ekleme
                        //buraya bi if daha ekle önceden de nböyle geldiyse tekrar ekleme listeye
                    }
                    System.out.println("server INIT file");
                }catch(Exception e){
                    e.printStackTrace();
                }
                break;
            }else{
                System.out.println("init file geldi ama eşleşmedi");
            }
        }
        return id;
    }
    private boolean checkInfiniteFile(int taskNumber){
        boolean check = false;
        for(int i = 0; i < infiniteTaskList.size(); i++){
            if(infiniteTaskList.get(i) == taskNumber){
                check = true;
                break;
            }
        }
        return check;
    }
    private boolean writeFile(SocketIOClient client, DataFileSending file){
        boolean error = false;
        for(int i = 0; i < table.getRowCount(); i++){
            DataClient data = (DataClient) table.getValueAt(i, 0);
            System.out.println("client name kontrol : "+ file.getclientName());
            if(data.getName().equals(file.getclientName())){
                try{
                    data.writeFile(file.getLine(), file.getFileID());
                }catch(Exception e){
                    error = true;
                    e.printStackTrace();
                }
                break;
            }
        }
        return !error;
    }
    private DataFileServer closeFile(SocketIOClient client, DataFileSending file){
        DataFileServer fileServer = null;
        for(int i = 0; i < table.getRowCount(); i++){
            DataClient data = (DataClient) table.getValueAt(i, 0);
            if(data.getName().equals(file.getclientName())){
                try{
                    data.closeWriter(file.getFileID());
                    //fileServer = data.getDataFileServer(fileID);
                    //listFiles.add(fileServer);
                }catch(Exception e){
                    e.printStackTrace();
                }
                break;
            }
        }
        return fileServer;
    }
    
    private int fileID;
    private synchronized int generateFileID(){
        fileID++;
        return fileID;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdStart;
    private javax.swing.JMenuItem disconnect;
    private javax.swing.JLabel exptimetxt;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JLabel remainstxt;
    private javax.swing.JButton startExperimentButton;
    private javax.swing.JTable table;
    private javax.swing.JLabel taskNumbertxt;
    // End of variables declaration//GEN-END:variables
}
